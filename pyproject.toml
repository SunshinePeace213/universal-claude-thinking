[project]
name = "universal-claude-thinking-v2"
version = "0.1.0"
description = "Universal Claude Thinking v2 - Context Engineering Architecture with 7-layer cognitive system"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Universal Claude Thinking Team"}
]

dependencies = [
    # Core dependencies
    "pydantic>=2.10.4",
    "pyyaml>=6.0.1",
    "aiofiles>=23.2.1",
    "aiosqlite>=0.20.0",
    "aiohttp>=3.10.0",
    "uvloop>=0.21.0",
    
    # ML/Embeddings
    "sentence-transformers>=5.0.0",
    "torch>=2.7.1",
    "transformers>=4.54.0",
    
    # Vector storage
    "chromadb>=1.0.15",
    "sqlite-vec>=0.1.6",  # Critical for sqlite vector operations
    
    # Data processing & analysis
    "pandas>=2.3.1",
    "numpy>=2.3.2",
    
    # NLP
    "spacy>=3.8.7",
    
    # Monitoring & profiling
    "memory-profiler>=0.61.0",
    "psutil>=7.0.0",
    
    # Scheduling
    "apscheduler>=3.11.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.0",
    "pytest-cov>=6.0.0",
    "pytest-xdist>=3.6.1",
    "pytest-mock>=3.14.0",
    "pytest-benchmark>=5.1.0",  # Performance testing
    
    # Development tools
    "black>=24.10.0",
    "ruff>=0.8.4",
    "mypy>=1.14.0",
    "pre-commit>=4.0.1",
    
    # Visualization (for development/debugging)
    "matplotlib>=3.10.5",
    "seaborn>=0.13.2",
]

[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[tool.uv]
dev-dependencies = [
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.0",
    "pytest-cov>=6.0.0",
    "black>=24.10.0",
    "ruff>=0.8.4",
    "mypy>=1.14.0",
]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long
    "B008", # do not perform function calls in argument defaults
]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
pythonpath = ["."]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]